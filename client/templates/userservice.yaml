apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{.Values.yuuvis.labels.app}}
    name: userservice
  name: userservice
spec:
  replicas: {{.Values.yuuvis.client.userservice.instances}}
  selector:
    matchLabels:
      name: userservice
  template:
    metadata:
      labels:
        name: userservice
    spec:
      {{- if or .Values.yuuvis.client.userservice.nodeAffinity .Values.yuuvis.client.userservice.podAffinity .Values.yuuvis.client.userservice.podAntiAffinity }}
      affinity:
        {{- with .Values.yuuvis.client.userservice.nodeAffinity }}
        nodeAffinity: {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.yuuvis.client.userservice.podAffinity }}
        podAffinity: {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.yuuvis.client.userservice.podAntiAffinity }}
        podAntiAffinity: {{- toYaml . | nindent 10 }}
        {{- end }}
      {{- end }}
      containers:
      - env:
        - name: JAVA_OPTS
          value: {{.Values.yuuvis.client.userservice.java.maxHeap}}
        - name: SPRING_CLOUD_CONFIG_URI
          value: {{ .Values.yuuvis.configservice.url }}
        - name: SPRING_PROFILES_ACTIVE
          value: {{.Values.yuuvis.client.userservice.profiles}}
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: userservice-dbsecret
        - name: DB_PWD
          valueFrom:
            secretKeyRef:
              key: password
              name: userservice-dbsecret
        - name: DB_HOST
          value: {{.Values.yuuvis.client.userservice.database.address}}
        - name: DB_PORT
          value: {{.Values.yuuvis.client.userservice.database.port | quote }}
        - name: DB_NAME
          value: {{.Values.yuuvis.client.userservice.database.name}}
        image: {{.Values.yuuvis.image.dockerRegistry}}/{{.Values.yuuvis.client.userservice.dockerImage}}
        imagePullPolicy: {{ .Values.yuuvis.image.imagePullPolicy }}
        name: userservice
        ports:
        - containerPort: 8080
          protocol: TCP
      imagePullSecrets:
      - name: {{.Values.yuuvis.image.imagePullSecret }}
      initContainers:
      {{- if .Values.yuuvis.client.userservice.database.createdb }}
      - command:
        - sh
        - /yuuvis/script/initdb.sh
        env:
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              key: user
              name: init-userservice-dbsecret
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: init-userservice-dbsecret
        - name: DBUSER
          valueFrom:
            secretKeyRef:
              key: user
              name: userservice-dbsecret
        - name: DBPWD
          valueFrom:
            secretKeyRef:
              key: password
              name: userservice-dbsecret
        - name: DBNAME
          value: {{.Values.yuuvis.client.userservice.database.name}}
        image: {{.Values.yuuvis.image.dockerRegistry}}/{{.Values.yuuvis.client.userservice.initContainerImage}}
        imagePullPolicy: Always
        name: init-database
        volumeMounts:
        - mountPath: /yuuvis/script/initdb.sh
          name: initdbscript
          subPath: initdb.sh
      {{- end}}
      - name: init-config
        image: "{{.Values.initContainer.dockerRegistry}}/{{.Values.initContainer.image}}:{{.Values.initContainer.tag}}"
        command: ["sh", "-c", "{{.Values.initContainer.command}}"]
        imagePullPolicy: IfNotPresent
      restartPolicy: Always
      {{- with .Values.yuuvis.client.userservice.nodeSelector }}
      nodeSelector: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.yuuvis.client.userservice.priorityClassName }}
      priorityClassName: {{ .Values.yuuvis.client.userservice.priorityClassName }}
      {{- end }}
      {{- with .Values.yuuvis.client.userservice.tolerations }}
      tolerations: {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      {{- if .Values.yuuvis.client.userservice.database.createdb }}
      - configMap:
          name: inituserservicedbconfigmap
        name: initdbscript
      {{- end}}