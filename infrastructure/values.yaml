imageCredentials:
  dockeryuuvisorg:
    registry: docker.yuuvis.org
    username: 
    password: 

yuuvis:
  # !!! Change before running
  # replace the value with the namespace you intent to use for the yuuvis API services
  # this chart creates a k8s job that generatey a selfsigned certificate and deploys the
  # crt file as a secret to the given namespace
  namespaces: 
    yuuvis: yuuvis
    infrastructure: infrastructure
  authentication:
    # we assume test deployment in minikube
    # ip is the ip of the vm minikube creates
    # to get the ip: minikube ip
    ip: 192.168.99.100
    port: 30080
  labels:
    app: yuuvis
  db:
    user: yuuvis
    password: changeme
  keycloak:
    user: keycloak
    password: changeme
    db:
      user: keycloak
      password: changeme
    nodePort: 30111
    realm:
      yuuvistest:
        user:
          name: root
          password: changeme
      testyuuvis:
        user:
          name: root
          password: changeme
  git:
    user: yuuvis
    password: changeme
    initcontainer:
      image: docker.yuuvis.org/yuuvis/helper/init-helper:latest
      secret: dockeryuuvisorg


elasticsearch:
  image: docker.yuuvis.org/yuuvis/elasticsearch:2022-01-11
  imagePullPolicy: IfNotPresent
  imagePullSecret: dockeryuuvisorg
  storage: 100Gi
  storageClassName: standard
  port: 9300
  targetPort: 9300
  port2: 9200
  targetPort2: 9200
  highAvailability:
    enabled: false
    # Combined memory of all elasticsearch nodes should not exceed 50% of capacity
    data:
      nodes: 2
      storage: 200Gi
      memory: -Xms4096m -Xmx4096m
    master:
      nodes: 3
      storage: 50Gi
      memory: -Xms1024m -Xmx1024m
      initial_master_nodes: elasticsearch-master-0, elasticsearch-master-1, elasticsearch-master-2
  # Default values if high availability is disabled. Nodes function as both data and master nodes simultaneously.
  nodes: 1
  initial_master_nodes: elasticsearch-0  
  memory: -Xms1024m -Xmx1024m


postgresql:
  enabled: true
  fullnameOverride: postgresql
  postgresqlPassword: changeme
  persistence:
    storageClass: standard
    size: 500Mi
  resources:
    requests:
      memory: 128Mi
      cpu: 50m
  livenessProbe:
    enabled: false
  readinessProbe:
    enabled: false
  initdbScriptsConfigMap: postgresql-initdb
  postgresqlExtendedConf: {"max_connections": "400", "shared_buffers": "128MB"}

rabbitmq:
  enabled: true
  fullnameOverride: rabbitmq
  auth:
    username: rodger
    password: changeme
  extraPlugins: "rabbitmq_auth_backend_ldap rabbitmq_amqp1_0 rabbitmq_prometheus"
  extraConfiguration: |-
    #default_vhost = {{ .Release.Namespace }}-vhost
    #disk_free_limit.absolute = 50MB
    #load_definitions = /app/load_definition.json
    amqp1_0.default_user = rodger
  persistence:
    enabled: true
    storageClass: standard
    size: 1Gi
    
gitea:
  enabled: true
  fullnameOverride: gitea
  ingress:
    enabled: true
  gitea:
    admin:
      password: changeme
    config:
      database: 
        DB_TYPE: sqlite3
        ## https://gitea.com/gitea/helm-chart/issues/95#issuecomment-122875
        ## Note that the intit script checks to see if the IP & port of the database service is accessible, so make sure you set those to something that resolves as successful (since sqlite uses files on disk setting the port & ip won't affect the running of gitea).
        HOST: example.com
        PORT: 80
      service:
        DISABLE_REGISTRATION: true  
    database:
      builtIn:
        postgresql:
          enabled: false
    cache:
      builtIn:
        enabled: false
  persistence:
    enabled: true
    size: 1Gi
  
minio:
  enabled: true
  fullnameOverride: minio
  accessKey: "MGMWCOYTDUSLNCFE"
  secretKey: "changeme"
  persistence:
    storageClass: standard
    size: 10Gi
  resources: {}
  # for gateway usage with azure blob storage set access  key and secret key to your
  # storage account credentials, activate azure gateway mode and disable persistence
  # persistence:
  #   enabled: false
  # azuregateway:
  #   enabled: true
  #   replicas: 1 

keycloak:
  enabled: true
  fullnameOverride: "keycloak"
  image.repository: docker.yuuvis.org/yuuvis/keycloak
  image.tag: 11.0.2-stable1
  livenessProbe: |
    httpGet:
      path: /auth/
      port: http
    initialDelaySeconds: 600
    timeoutSeconds: 5
  postgresql:
    enabled: false
  extraEnv: |
    - name: KEYCLOAK_USER_FILE
      value: /secrets/keycloak/user
    - name: KEYCLOAK_PASSWORD_FILE
      value: /secrets/keycloak/password
    - name: PROXY_ADDRESS_FORWARDING
      value: "true"
    - name: DB_VENDOR
      value: postgres
    - name: DB_ADDR
      value: postgresql
    - name: DB_PORT
      value: "5432"
    - name: DB_DATABASE
      value: keycloak
    - name: DB_USER_FILE
      value: /secrets/db-creds/user
    - name: DB_PASSWORD_FILE
      value: /secrets/db-creds/password
    - name: KEYCLOAK_IMPORT
      value: "/realm/yuuvistest.json,/realm/testyuuvis.json -Dkeycloak.profile.feature.upload_scripts=enabled"
  extraVolumes: |
    - name: realm-config
      configMap:
        name: realmconfigmap
    - name: keycloak-tls-localhost
      secret:
        defaultMode: 420
        secretName: keycloak-selfsigned-tls-secret
    - name: db-creds
      secret:
        secretName: keycloakdb
    - name: kc-creds
      secret:
        secretName: keycloakuser
  extraVolumeMounts: |
    - name: realm-config
      mountPath: "/realm/"
      readOnly: true
    - name: keycloak-tls-localhost
      mountPath: "/etc/x509/https/"
    - name: db-creds
      mountPath: /secrets/db-creds
      readOnly: true
    - name: kc-creds
      mountPath: /secrets/keycloak
      readOnly: true

redis:
  fullnameOverride: redis
  ## Cluster settings
  cluster:
    enabled: false
  usePassword: false
  master:
    livenessProbe:
      initialDelaySeconds: 600
    persistence:
      enabled: false
      storageClass: standard
      size: 50Mi
