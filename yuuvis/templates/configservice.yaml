apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: {{.Values.yuuvis.labels.app}}
    name: configservice
    yuuvis: "true"
  name: configservice
spec:
  serviceName: config-sts
  replicas: {{.Values.yuuvis.services.config.instances}} 
  selector:
    matchLabels:
      name: configservice
  template:
    metadata:
      labels:
        name: configservice
    spec:
      initContainers:
      - name: init-config
        image: alpine/git:latest
        imagePullPolicy: IfNotPresent
        command: ['sh', '/yuuvis/script/checkgit.sh']
        volumeMounts:
        - mountPath: /yuuvis/script/checkgit.sh
          name: initscript
          subPath: checkgit.sh
      containers:
      - name: configservice
        image: "{{.Values.yuuvis.services.config.dockerRegistry}}:{{ .Values.yuuvis.services.config.tag }}"
        imagePullPolicy: {{ .Values.yuuvis.image.imagePullPolicy }}
        {{- if .Values.yuuvis.livenessProbe.enable }}
        livenessProbe:
          httpGet:
            path: {{.Values.yuuvis.livenessProbe.path}}
            port: {{.Values.yuuvis.services.config.port}}
          initialDelaySeconds: {{.Values.yuuvis.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{.Values.yuuvis.livenessProbe.periodSeconds }}
          timeoutSeconds: {{.Values.yuuvis.livenessProbe.timeoutSeconds }}
        {{- end}}
        {{- if .Values.yuuvis.readinessProbe.enable }}
        readinessProbe:
          httpGet:
            path: {{.Values.yuuvis.readinessProbe.path}}
            port: {{.Values.yuuvis.services.config.port}}
          initialDelaySeconds: {{.Values.yuuvis.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{.Values.yuuvis.readinessProbe.periodSeconds }}
          timeoutSeconds: {{.Values.yuuvis.readinessProbe.timeoutSeconds }}
        {{- end}}
        resources:
          requests:
            memory: {{.Values.yuuvis.services.config.requests.memory}}
        env:
        - name: JAVA_OPTS
          value: {{.Values.yuuvis.services.config.java.maxHeap}}
        - name: SERVER_PORT
          value: "{{.Values.yuuvis.services.config.port}}"
        - name: SPRING_CLOUD_CONFIG_LABEL
          value: {{.Values.yuuvis.git.branch}}
        - name: SPRING_CLOUD_CONFIG_SERVER_GIT_DEFAULT-LABEL
          value: {{.Values.yuuvis.git.branch}}
        - name: SPRING_CLOUD_CONFIG_SERVER_GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: gitsecret
        - name: SPRING_CLOUD_CONFIG_SERVER_GIT_URI
          value: {{.Values.yuuvis.git.protocol}}://{{.Values.yuuvis.git.url}}
        - name: SPRING_CLOUD_CONFIG_SERVER_GIT_USERNAME
          valueFrom:
            secretKeyRef:
              key: user
              name: gitsecret
        - name: SPRING_CLOUD_CONFIG_SERVER_PREFIX
          value: /config/
        ports:
        - containerPort: {{.Values.yuuvis.services.config.port}}
        volumeMounts:
        - mountPath: /tmp/configservice
          name: configservice-local
      restartPolicy: Always
      automountServiceAccountToken: false
      imagePullSecrets:
      - name: yuuvisorg
      volumes:
      - configMap:
          name: initconfigserviceconfigmap
        name: initscript
      securityContext:
        fsGroup: 2000
        runAsGroup: 3000
        runAsUser: 1000
  volumeClaimTemplates:
  - metadata:
      name: configservice-local
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{.Values.yuuvis.services.config.storage.request}}
{{- if .Values.yuuvis.services.config.storage.class }}
      storageClassName: {{.Values.yuuvis.services.config.storage.class}}
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: config-sts
  labels:
    name: config-sts
spec:
  ports:
  - name: "http"
    port: 80
    targetPort: 7282
  selector:
    name: configservice
  clusterIP: None
