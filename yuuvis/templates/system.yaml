apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: {{.Values.yuuvis.labels.app}}
    name: system
  name: system
spec:
  serviceName: system-sts
  replicas: {{.Values.yuuvis.services.system.instances}} 
  selector:
    matchLabels:
      name: system
  template:
    metadata:
      labels:
        name: system
    spec:
      {{- if or .Values.yuuvis.services.system.nodeAffinity .Values.yuuvis.services.system.podAffinity .Values.yuuvis.services.system.podAntiAffinity }}
      affinity:
        {{- with .Values.yuuvis.services.system.nodeAffinity }}
        nodeAffinity: {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.yuuvis.services.system.podAffinity }}
        podAffinity: {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.yuuvis.services.system.podAntiAffinity }}
        podAntiAffinity: {{- toYaml . | nindent 10 }}
        {{- end }}
      {{- end }}
      initContainers:
      - name: init-system
        image: "{{.Values.yuuvis.services.system.initContainer.dockerRegistry}}/{{.Values.yuuvis.services.system.initContainer.image}}:{{ .Values.yuuvis.services.system.initContainer.tag }}"
        imagePullPolicy: {{ .Values.yuuvis.services.system.imagePullPolicy }}
        command: ['sh', '/tmp/script/initgit.sh']
        volumeMounts:
        - mountPath: /yuuvis/data
          name: configyml
        - mountPath: /yuuvis/data/system
          name: systemconfig
        - mountPath: /tmp/script/initgit.sh
          name: initscript
          subPath: initgit.sh
        env:
        - name: KEYCLOAKURL
          value: {{.Values.yuuvis.initjob.keycloak.url}}
        - name: KEYCLOAKADMIN
          value: {{.Values.yuuvis.initjob.keycloak.admin}}
        - name: KEYCLOAKPASSOWRD
          value: {{.Values.yuuvis.initjob.keycloak.password}}
        - name: KEYCLOAKINITREALMNAME
          value: {{.Values.yuuvis.initjob.keycloak.realm.name}}
        - name: KEYCLOAKINITREALMUSER
          value: {{.Values.yuuvis.initjob.keycloak.realm.user}}
        - name: KEYCLOAKINITREALMPASSWORD
          value: {{.Values.yuuvis.initjob.keycloak.realm.password}}
        - name: YUUVISAUTHURL
          value: {{.Values.yuuvis.initjob.authurl}}
        - name: CREATEREALM
          value: "{{.Values.yuuvis.initjob.createrealm}}"
        - name: GITSERVER
          value: {{.Values.yuuvis.git.server}}
        - name: GITURL
          value: {{.Values.yuuvis.git.url}}
        - name: GITBRANCH
          value: {{.Values.yuuvis.git.branch}}
        - name: GITNAME
          value: {{.Values.yuuvis.git.name}}
        - name: GITUSER
          valueFrom:
            secretKeyRef:
              key: user
              name: gitsecret
        - name: GITPASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: gitsecret
      containers:
      - name: system
        image: "{{.Values.yuuvis.image.dockerRegistry}}/{{.Values.yuuvis.services.system.dockerImage}}:{{ .Values.yuuvis.services.system.tag }}"
        imagePullPolicy: {{ .Values.yuuvis.image.imagePullPolicy }}
        {{- if .Values.yuuvis.livenessProbe.enable }}
        livenessProbe:
          httpGet:
            path: {{.Values.yuuvis.livenessProbe.path}}
            port: {{.Values.yuuvis.services.system.port}}
          initialDelaySeconds: {{.Values.yuuvis.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{.Values.yuuvis.livenessProbe.periodSeconds }}
          timeoutSeconds: {{.Values.yuuvis.livenessProbe.timeoutSeconds }}
        {{- end}}
        {{- if .Values.yuuvis.readinessProbe.enable }}
        readinessProbe:
          httpGet:
            path: {{.Values.yuuvis.readinessProbe.path}}
            port: {{.Values.yuuvis.services.system.port}}
          initialDelaySeconds: {{.Values.yuuvis.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{.Values.yuuvis.readinessProbe.periodSeconds }}
          timeoutSeconds: {{.Values.yuuvis.readinessProbe.timeoutSeconds }}
        {{- end}}
        resources:
          requests:
            memory: {{.Values.yuuvis.services.system.requests.memory}}
        env:
        - name: JAVA_OPTS
          value: {{.Values.yuuvis.services.system.java.maxHeap}}
        - name: SPRING_PROFILES_ACTIVE
          value: {{.Values.yuuvis.services.system.profiles}}
        - name: SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCHLOCATIONS
          value: file:/tmp/configservice/resource-git
        - name: SPRING_CLOUD_CONFIG_LABEL
          value: {{.Values.yuuvis.git.branch}}
        - name: SPRING_CLOUD_CONFIG_SERVER_GIT_DEFAULT-LABEL
          value: {{.Values.yuuvis.git.branch}}
        - name: SPRING_CLOUD_CONFIG_SERVER_GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: gitsecret
        - name: SPRING_CLOUD_CONFIG_SERVER_GIT_URI
          value: {{.Values.yuuvis.git.protocol}}://{{.Values.yuuvis.git.url}}
        - name: SPRING_CLOUD_CONFIG_SERVER_GIT_USERNAME
          valueFrom:
            secretKeyRef:
              key: user
              name: gitsecret
        - name: SPRING_CLOUD_CONFIG_SERVER_PREFIX
          value: /config/
        ports:
        - containerPort: {{.Values.yuuvis.services.system.port}}
        volumeMounts:
        - mountPath: /tmp/configservice
          name: system-local
        {{- if .Values.yuuvis.services.system.volumeMounts }}
{{ tpl .Values.yuuvis.services.system.volumeMounts . | indent 8 }}
        {{- end }}
      restartPolicy: Always
      serviceAccount: systemserviceaccount
      {{- with .Values.yuuvis.services.system.nodeSelector }}
      nodeSelector: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.yuuvis.services.system.priorityClassName }}
      priorityClassName: {{ .Values.yuuvis.services.system.priorityClassName }}
      {{- end }}
      {{- with .Values.yuuvis.services.system.tolerations }}
      tolerations: {{- toYaml . | nindent 8 }}
      {{- end }}
      imagePullSecrets:
      - name: {{ .Values.yuuvis.image.imagePullSecret }}
      volumes:
      - configMap:
          name: initcommitconfigmap
        name: initscript
      - configMap:
          name: profilesconfigmap
        name: configyml
      - configMap:
          name: systemconfigmap
        name: systemconfig
      {{- if .Values.yuuvis.services.system.volumes }}
{{ tpl .Values.yuuvis.services.system.volumes . | indent 6 }}
      {{- end}}
      securityContext:
        fsGroup: 2000
        runAsGroup: 3000
        runAsUser: 1000
  volumeClaimTemplates:
  - metadata:
      name: system-local
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{.Values.yuuvis.services.system.storage.request}}
{{- if .Values.yuuvis.services.system.storage.class }}
      storageClassName: {{.Values.yuuvis.services.system.storage.class}}
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: system-sts
  labels:
    name: system-sts
spec:
  ports:
  - name: "http"
    port: 80
    targetPort: {{.Values.yuuvis.services.system.port}}
  selector:
    name: system
  clusterIP: None
